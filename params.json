{"name":"Django-jsonfield","tagline":"Reusable JSONField() for Django","body":"# django-jsonfield\r\n\r\ndjango-jsonfield is a reusable Django field that allows you to store validated JSON in your model.\r\n\r\nIt silently takes care of serialization. To use, simply add the field to one of your models.\r\n\r\n===\r\n\r\n## Install\r\n\r\n    pip install jsonfield\r\n\r\n\r\n## Usage\r\n\r\n    from django.db import models\r\n    from jsonfield import JSONField\r\n\r\n    class MyModel(models.Model):\r\n      json = JSONField()\r\n\r\n\r\n## Advanced Usage\r\n\r\nBy default python deserializes json into dict objects. This behavior differs from the standard json behavior because python dicts do not have ordered keys.\r\n\r\nTo overcome this limitation and keep the sort order of OrderedDict keys the deserialisation can be adjusted on model initialisation:\r\n\r\n    import collections\r\n    class MyModel(models.Model):\r\n      json = JSONField(load_kwargs={'object_pairs_hook': collections.OrderedDict})\r\n\r\n\r\n## Other Fields\r\n\r\n**jsonfield.JSONCharField**\r\n\r\nIf you need to use your JSON field in an index or other constraint, you can use **JSONCharField** which subclasses **CharField** instead of **TextField**. You'll also need to specify a **max_length** parameter if you use this field.\r\n\r\n## Contact\r\n\r\nhttp://bradjasper.com\r\n","google":"UA-11057852-1","note":"Don't delete this file! It's used internally to help with page regeneration."}